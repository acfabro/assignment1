<?php


namespace Acfabro\MailerLiteAssignment\Repository;


use Acfabro\MailerLiteAssignment\Database\Connection;
use Acfabro\MailerLiteAssignment\Entities\Subscriber;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Exception\InvalidArgumentException;
use Doctrine\DBAL\ParameterType;

/**
 * Class SubscriberRepository
 *
 * Repository Pattern implementation for Subscriber entities
 *
 * @package Acfabro\MailerLiteAssignment\Repository
 */
class SubscriberRepository
{
    /**
     * @var \Doctrine\DBAL\Connection
     */
    protected $conn;

    /**
     * SubscriberRepository constructor.
     * @param null $conn Database connection
     * @throws \Doctrine\DBAL\DBALException
     */
    public function __construct($conn = null)
    {
        if (empty($conn)) {
            $this->conn = Connection::instance();
        }
    }

    /**
     * Returns an array of Subscribers
     * @param int $limit
     * @param int $offset
     * @return array
     * @throws DBALException
     */
    public function list(int $limit = 10, int $offset = 0)
    {
        $stmt = $this->conn->executeQuery(
            "SELECT * FROM subscribers LIMIT ? OFFSET ?",
            [$limit, $offset],
            [ParameterType::INTEGER, ParameterType::INTEGER]);


        $result = [];
        while($row = $stmt->fetch()) {
            $result[] = new Subscriber($row);
        }
        return $result;
    }

    /**
     * Lists all fields for a given subscriber id
     * @param $subscriberId
     * @return array
     * @throws DBALException
     */
    public function listFields($subscriberId)
    {
        $stmt = $this->conn->executeQuery(
            "SELECT * FROM fields WHERE subscriber_id=?",
            [$subscriberId],
            [ParameterType::INTEGER]);

        $result = [];
        while($row = $stmt->fetch()) {
            $result[] = new Subscriber($row);
        }
        return $result;
    }

    /**
     * Returns a specific subscriber
     * @param int $subscriberId
     * @return Subscriber
     * @throws DBALException
     */
    public function find(int $subscriberId)
    {
        $stmt = $this->conn->executeQuery(
            "SELECT * FROM subscribers WHERE id=?",
            [$subscriberId],
            [ParameterType::INTEGER],
        );

        $row = $stmt->fetch();
        if (!$row) {
            return null;
        } else {
            return new Subscriber($row);
        }
    }

    /**
     * Save a new subscriber to storage
     * @param Subscriber $subscriber
     * @return Subscriber
     * @throws \Doctrine\DBAL\DBALException
     */
    public function save(Subscriber $subscriber)
    {
        // start transaction
        $this->conn->beginTransaction();// insert subscriber

        try {
            // if ID exists, then update, if not then insert
            if (!$subscriber->getId()) {
                $this->conn->insert(
                    'subscribers',
                    $subscriber->data()
                );// insert fields
            } else {
                $this->conn->update(
                    'subscribers',
                    $subscriber->data(),
                    ['id' => $subscriber->getId()]
                );// update fields
            }

            // get the autogenerated id if any
            $subscriberId = !empty($subscriber->getId())? $subscriber->getId(): $this->conn->lastInsertId();

            // now get the fields associated and insert them to db
            $fields = $subscriber->getFields();
            if (!empty($fields)) {
                $this->saveFields($fields, $subscriberId);
            }

            // all inserts done, commit to db
            $this->conn->commit();
        } catch (DBALException $e) {
            // rollback on error
            $this->conn->rollBack();
        }

        return $subscriber;
    }

    protected function saveFields(Collection $fields, ?int $subscriberId)
    {
        foreach ($fields as $field) {
            $field->setSubscriberId($subscriberId);

            // object is new, so insert all fields
            $this->conn->insert('fields', $field->data());
        }
    }

    /**
     * Update a subscriber object
     * @param Subscriber $subscriber
     * @return Subscriber
     */
    public function update(Subscriber $subscriber)
    {
        return $subscriber;
    }

    /**
     * Update a subscriber object
     * @param int $subscriberId
     * @return bool
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function delete(int $subscriberId)
    {
        $this->conn->beginTransaction();

        try {
            $this->conn->delete('fields', ['subscriber_id' => $subscriberId]);
            $this->conn->delete('subscribers', ['id' => $subscriberId]);
            $this->conn->commit();

            return true;

        } catch (InvalidArgumentException $e) {
            $this->conn->rollBack();

        } catch (DBALException $e) {
            $this->conn->rollBack();
        }

        return false;
    }

    public function deleteField(int $fieldId)
    {
        return $this->conn->delete('fields', ['id' => $fieldId]);
    }

    /**
     * Add a field to a subscriber
     * @param $subscriber
     * @param $field
     * @return Subscriber
     */
    public function subscriberAddField(Subscriber $subscriber, int $field)
    {
        return $subscriber;
    }

    /**
     * Remove a field from a subscriber
     * @param $subscriber
     * @param $fieldId
     * @return mixed
     */
    public function subscriberRemoveField(Subscriber $subscriber, int $fieldId)
    {
        return $subscriber;
    }

}